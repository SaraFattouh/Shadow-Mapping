#version 400
//This shader creates quads // runs for 4 vertices
//This vertics shader has these positions and texture coordinates in a constant vector 

vec4 positions[4] = vec4[4](
	vec4(-1,-1, 0, 1), //x,y positions are the corners of the screen 
	vec4( 1,-1, 0, 1),
	vec4(-1, 1, 0, 1),
	vec4( 1, 1, 0, 1)
);

vec2 texCoords[4] = vec2[4](
	vec2(0, 0), // texture coordinates for these thy are the same but instead of -1 we have 0
	vec2(1, 0),
	vec2(0, 1),
	vec2(1, 1)
);

//there is no input for this shader,only output 
out vec2 vs_out_tex; //output the texture value (between 0 and 1 //unsigne normalised coordinates of the fragment value )

void main()
{
//gl_VertexID
//variable that holds an integer index for the vertex. The index is implicitly generated by glDrawArrays 

	gl_Position = positions[gl_VertexID]; // use indecies to get the appropriate value for the array [read appropriate value form the constant matrix]
	vs_out_tex	= texCoords[gl_VertexID];
}